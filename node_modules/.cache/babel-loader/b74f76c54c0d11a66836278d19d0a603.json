{"ast":null,"code":"import _toConsumableArray from \"/home/nguyenxuancuong/Sites/unittest/react/reactjs-redux/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this;\n\nimport * as types from './../constants/ActionTypes';\n\nvar s4 = function s4() {\n  return Math.floor(1 * Math.random() * 0x10000).toString(16).substring(1);\n};\n\nvar ramdomID = function ramdomID() {\n  return s4() + s4() + '-' + s4();\n}; //find id\n\n\nvar findIndex = function findIndex(id) {\n  var tasks = _this.state.tasks;\n  var result = -1;\n  tasks.forEach(function (task, index) {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = function myReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: ramdomID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    case types.UPDATE_STATUS_TASK:\n      var tasks = _this.state.tasks;\n\n      var index = _.findIndex(tasks, function (task) {\n        return task.id === id;\n      });\n\n      tasks[index].status = !tasks[index].status;\n\n      _this.setState({\n        tasks: tasks\n      });\n\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/nguyenxuancuong/Sites/unittest/react/reactjs-redux/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","ramdomID","findIndex","id","tasks","state","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","_","setState"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEA,IAAIC,EAAE,GAAG,SAALA,EAAK,GAAK;AACL,SAAOC,IAAI,CAACC,KAAL,CAAY,IAAGD,IAAI,CAACE,MAAL,EAAJ,GAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAP;AACJ,CAFL;;AAIA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,GAAK;AACT,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAA7B;AACV,CAFD,C,CAII;;;AACJ,IAAIO,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAQ;AAAA,MACnBC,KADmB,GACV,KAAI,CAACC,KADK,CACnBD,KADmB;AAExB,MAAIE,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,QAAGD,IAAI,CAACL,EAAL,KAAYA,EAAf,EAAkB;AACdG,MAAAA,MAAM,GAAGG,KAAT;AACH;AACJ,GAJD;AAKA,SAAOH,MAAP;AACC,CATD;;AAYA,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AACA,IAAIM,SAAS,GAAG,SAAZA,SAAY,GAAkC;AAAA,MAAjCX,KAAiC,uEAAzBU,YAAyB;AAAA,MAAXE,MAAW;;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOd,KAAP;;AACJ,SAAKX,KAAK,CAAC0B,QAAX;AACG,UAAIC,OAAO,GAAG;AACTlB,QAAAA,EAAE,EAAQF,QAAQ,EADT;AAETqB,QAAAA,IAAI,EAAML,MAAM,CAACT,IAAP,CAAYc,IAFb;AAGTC,QAAAA,MAAM,EAAGN,MAAM,CAACT,IAAP,CAAYe,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHvC,OAAd;AAKAlB,MAAAA,KAAK,CAACmB,IAAN,CAAWH,OAAX;AACAR,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAerB,KAAf,CAA9B;AACA,gCAAWA,KAAX;;AACH,SAAKX,KAAK,CAACiC,kBAAX;AAAA,UACcvB,KADd,GACwB,KAAI,CAACC,KAD7B,CACcD,KADd;;AAEQ,UAAIK,KAAK,GAAGmB,CAAC,CAAC1B,SAAF,CAAYE,KAAZ,EAAmB,UAACI,IAAD,EAAU;AACrC,eAAOA,IAAI,CAACL,EAAL,KAAYA,EAAnB;AACH,OAFW,CAAZ;;AAGAC,MAAAA,KAAK,CAACK,KAAD,CAAL,CAAac,MAAb,GAAsB,CAACnB,KAAK,CAACK,KAAD,CAAL,CAAac,MAApC;;AACI,MAAA,KAAI,CAACM,QAAL,CAAc;AACTzB,QAAAA,KAAK,EAAEA;AADE,OAAd;;AAGJS,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAetB,KAAf,CAA9B;AACL,aAAOC,KAAP;;AACH;AAAS,aAAOA,KAAP;AAvBb;AAyBH,CA1BD;;AA4BA,eAAeW,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\n\nvar s4 = () =>{\n         return Math.floor((1* Math.random() ) * 0x10000).toString(16).substring(1);\n    }\n\nvar ramdomID = () =>{\n           return s4() + s4() + '-' + s4();\n}\n\n    //find id\nvar findIndex = (id) => {\nvar {tasks} = this.state;\nvar result = -1;\ntasks.forEach((task, index) => {\n    if(task.id === id){\n        result = index;\n    }\n});\nreturn result;\n}\n\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\nvar myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n           var newTask = {\n                id     :  ramdomID(),\n                name   :  action.task.name,\n                status : action.task.status === 'true' ? true : false\n           };\n           state.push(newTask);\n           localStorage.setItem('tasks', JSON.stringify(state));\n           return [...state];\n        case types.UPDATE_STATUS_TASK:\n                var { tasks } = this.state;\n                var index = _.findIndex(tasks, (task) => {\n                    return task.id === id;\n                });\n                tasks[index].status = !tasks[index].status;\n                    this.setState({\n                         tasks: tasks\n                    })\n                localStorage.setItem('tasks', JSON.stringify(tasks));\n           return state;\n        default: return state;\n    }\n};\n\nexport default myReducer;\n"]},"metadata":{},"sourceType":"module"}