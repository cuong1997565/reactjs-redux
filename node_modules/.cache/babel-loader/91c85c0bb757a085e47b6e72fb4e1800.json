{"ast":null,"code":"import _objectSpread from \"/home/nguyenxuancuong/Sites/unittest/react/reactjs-redux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/nguyenxuancuong/Sites/unittest/react/reactjs-redux/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as types from './../constants/ActionTypes';\n\nvar s4 = function s4() {\n  return Math.floor(1 * Math.random() * 0x10000).toString(16).substring(1);\n};\n\nvar ramdomID = function ramdomID() {\n  return s4() + s4() + '-' + s4();\n}; //find id\n\n\nvar findIndex = function findIndex(tasks, id) {\n  var result = -1;\n  tasks.forEach(function (task, index) {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = function myReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      var newTask = {\n        id: ramdomID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    case types.UPDATE_STATUS_TASK:\n      var id = action.id;\n      var index = findIndex(state, id); // state[index].status = !state[index].status;\n      // Clone task mới = task cũ && status = !status;\n      // Xóa task cũ => push task mới\n      // cach 1\n      // var cloneTask = {...state[index]};\n      // cloneTask.status = !cloneTask.status;\n      // //cách 1\n      // // state.splice(index, 1);\n      // // state.push(cloneTask);\n      // // cách 2\n      // state[index] = cloneTask;\n      //cach 3\n\n      state[index] = _objectSpread({}, state[index], {\n        status: !state[index].status\n      });\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    case types.DELETE_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/nguyenxuancuong/Sites/unittest/react/reactjs-redux/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","ramdomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","SAVE_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEA,IAAIC,EAAE,GAAG,SAALA,EAAK,GAAK;AACL,SAAOC,IAAI,CAACC,KAAL,CAAY,IAAGD,IAAI,CAACE,MAAL,EAAJ,GAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAP;AACJ,CAFL;;AAIA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,GAAK;AACT,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAA7B;AACV,CAFD,C,CAII;;;AACJ,IAAIO,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,EAAR,EAAe;AAC3B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,QAAGD,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAkB;AACdC,MAAAA,MAAM,GAAGG,KAAT;AACH;AACJ,GAJD;AAKA,SAAOH,MAAP;AACH,CARD;;AAWA,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AACA,IAAIM,SAAS,GAAG,SAAZA,SAAY,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKtB,KAAK,CAAC0B,SAAX;AACG,UAAIC,OAAO,GAAG;AACTjB,QAAAA,EAAE,EAAQH,QAAQ,EADT;AAETqB,QAAAA,IAAI,EAAML,MAAM,CAACV,IAAP,CAAYe,IAFb;AAGTC,QAAAA,MAAM,EAAGN,MAAM,CAACV,IAAP,CAAYgB,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHvC,OAAd;AAKAP,MAAAA,KAAK,CAACQ,IAAN,CAAWH,OAAX;AACAT,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA9B;AACA,gCAAWA,KAAX;;AACH,SAAKtB,KAAK,CAACiC,kBAAX;AACQ,UAAIvB,EAAE,GAAGa,MAAM,CAACb,EAAhB;AACA,UAAKI,KAAK,GAAGN,SAAS,CAACc,KAAD,EAASZ,EAAT,CAAtB,CAFR,CAGQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAY,MAAAA,KAAK,CAACR,KAAD,CAAL,qBACQQ,KAAK,CAACR,KAAD,CADb;AAEKe,QAAAA,MAAM,EAAG,CAACP,KAAK,CAACR,KAAD,CAAL,CAAae;AAF5B;AAIAX,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA9B;AACJ,gCAAWA,KAAX;;AAEJ,SAAKtB,KAAK,CAACkC,WAAX;AACI,UAAIxB,EAAE,GAAGa,MAAM,CAACb,EAAhB;AACA,UAAII,KAAK,GAAGN,SAAS,CAACc,KAAD,EAASZ,EAAT,CAArB;AACAY,MAAAA,KAAK,CAACa,MAAN,CAAarB,KAAb,EAAqB,CAArB;AACAI,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA9B;AAEA,gCAAWA,KAAX;;AACJ;AAAS,aAAOA,KAAP;AAzCb;AA2CH,CA5CD;;AA8CA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\n\nvar s4 = () =>{\n         return Math.floor((1* Math.random() ) * 0x10000).toString(16).substring(1);\n    }\n\nvar ramdomID = () =>{\n           return s4() + s4() + '-' + s4();\n}\n\n    //find id\nvar findIndex = (tasks ,id) => {\n    var result = -1;\n    tasks.forEach((task, index) => {\n        if(task.id === id){\n            result = index;\n        }\n    });\n    return result;\n}\n\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\nvar myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.SAVE_TASK:\n           var newTask = {\n                id     :  ramdomID(),\n                name   :  action.task.name,\n                status : action.task.status === 'true' ? true : false\n           };\n           state.push(newTask);\n           localStorage.setItem('tasks', JSON.stringify(state));\n           return [...state];\n        case types.UPDATE_STATUS_TASK:\n                var id = action.id;\n                var  index = findIndex(state , id);\n                // state[index].status = !state[index].status;\n                // Clone task mới = task cũ && status = !status;\n                // Xóa task cũ => push task mới\n                // cach 1\n                // var cloneTask = {...state[index]};\n                // cloneTask.status = !cloneTask.status;\n                // //cách 1\n                // // state.splice(index, 1);\n                // // state.push(cloneTask);\n                // // cách 2\n                // state[index] = cloneTask;\n                //cach 3\n                state[index] = {\n                     ...state[index],\n                     status : !state[index].status\n                };\n                localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case types.DELETE_TASK:\n            var id = action.id;\n            var index = findIndex(state , id);\n            state.splice(index , 1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n\n            return [...state];\n        default: return state;\n    }\n};\n\nexport default myReducer;\n"]},"metadata":{},"sourceType":"module"}